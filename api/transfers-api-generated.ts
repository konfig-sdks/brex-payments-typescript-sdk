/* tslint:disable */
/* eslint-disable */
/*
Payments API


The payments API allows you to initiate and manage payments and vendors from your Brex business accounts.


The version of the OpenAPI document: 1.0
Contact: developer-access@brex.com

NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { setOAuthToObject } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ApprovalType } from '../models';
// @ts-ignore
import { CounterParty } from '../models';
// @ts-ignore
import { CounterPartyIncomingTransfer } from '../models';
// @ts-ignore
import { CreateIncomingTransferRequest } from '../models';
// @ts-ignore
import { CreateTransferRequest } from '../models';
// @ts-ignore
import { CreateTransferRequestOriginatingAccount } from '../models';
// @ts-ignore
import { Money } from '../models';
// @ts-ignore
import { PageTransfer } from '../models';
// @ts-ignore
import { ReceivingAccount } from '../models';
// @ts-ignore
import { Transfer } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * TransfersApi - axios parameter creator
 * @export
 */
export const TransfersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         *  This endpoint creates a new incoming transfer. You may use use any eligible bank account connection to fund (ACH Debit)  any active Brex business account.  **Reminder**: You may not use the Brex API for any activity that requires a license or registration from any  governmental authority without Brex\'s prior review and approval. This includes but is not limited to any money services business or money transmission activity.  Please review the <a href=\"https://www.brex.com/legal/developer-portal/\">Brex Access Agreement</a> and contact us if  you have any questions. 
         * @summary  Create incoming transfer 
         * @param {string} idempotencyKey 
         * @param {CreateIncomingTransferRequest} createIncomingTransferRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createIncomingTransfer: async (idempotencyKey: string, createIncomingTransferRequest: CreateIncomingTransferRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'idempotencyKey' is not null or undefined
            assertParamExists('createIncomingTransfer', 'idempotencyKey', idempotencyKey)
            // verify required parameter 'createIncomingTransferRequest' is not null or undefined
            assertParamExists('createIncomingTransfer', 'createIncomingTransferRequest', createIncomingTransferRequest)
            const localVarPath = `/v1/incoming_transfers`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", ["incoming_transfers"], configuration)
            if (idempotencyKey != null) {
                localVarHeaderParameter['Idempotency-Key'] = String(idempotencyKey);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: createIncomingTransferRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/incoming_transfers',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(createIncomingTransferRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *  This endpoint creates a new transfer.  Currently, the API can only create transfers for the following payment rails: - ACH - DOMESTIC_WIRE - CHEQUE - INTERNATIONAL_WIRES (For vendors already created through dashboard. Rate limited to 100/day - Please reach out to developer-support@brex.com if you need to do more)  **Transaction Descriptions** * For outgoing check payments, a successful transfer will return a response containing a description value with a format of `Check #<check number> to <recipient_name> - <external_memo>`. * For book transfers (from one Brex Business account to another), the recipient value will have a format of `<customer_account.dba_name> - <external_memo>` and the sender will have a format of `<target customer account\'s dba name> - <external_memo>`. * For other payment rails, the format will be `<counterparty_name> - <external_memo>`, where Counterparty name is `payment_instrument.beneficiary_name` or `contact.name` For vendors created from the Payments API, the `counterparty_name` will be the `company_name` [field](https://developer.brex.com/openapi/payments_api/).  **Reminder**: You may not use the Brex API for any activity that requires a license or registration from any  governmental authority without Brex\'s prior review and approval. This includes but is not limited to any money services business or money transmission activity.  Please review the <a href=\"https://www.brex.com/legal/developer-portal/\">Brex Access Agreement</a> and contact us if  you have any questions. 
         * @summary  Create transfer 
         * @param {string} idempotencyKey 
         * @param {CreateTransferRequest} createTransferRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTransfer: async (idempotencyKey: string, createTransferRequest: CreateTransferRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'idempotencyKey' is not null or undefined
            assertParamExists('createTransfer', 'idempotencyKey', idempotencyKey)
            // verify required parameter 'createTransferRequest' is not null or undefined
            assertParamExists('createTransfer', 'createTransferRequest', createTransferRequest)
            const localVarPath = `/v1/transfers`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", ["transfers"], configuration)
            if (idempotencyKey != null) {
                localVarHeaderParameter['Idempotency-Key'] = String(idempotencyKey);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: createTransferRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/transfers',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(createTransferRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *  This endpoint gets a transfer by ID.  Currently, the API can only return transfers for the following payment rails: - ACH - DOMESTIC_WIRE - CHEQUE - INTERNATIONAL_WIRE 
         * @summary  Get transfer 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getById: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getById', 'id', id)
            const localVarPath = `/v1/transfers/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", ["transfers.readonly", "incoming_transfers"], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/transfers/{id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *  This endpoint lists existing transfers for an account.  Currently, the API can only return transfers for the following payment rails: - ACH - DOMESTIC_WIRE - CHEQUE - INTERNATIONAL_WIRE 
         * @summary  Lists transfers  
         * @param {string} [cursor] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        list: async (cursor?: string, limit?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/transfers`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", ["transfers.readonly", "incoming_transfers"], configuration)
            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/transfers',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TransfersApi - functional programming interface
 * @export
 */
export const TransfersApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TransfersApiAxiosParamCreator(configuration)
    return {
        /**
         *  This endpoint creates a new incoming transfer. You may use use any eligible bank account connection to fund (ACH Debit)  any active Brex business account.  **Reminder**: You may not use the Brex API for any activity that requires a license or registration from any  governmental authority without Brex\'s prior review and approval. This includes but is not limited to any money services business or money transmission activity.  Please review the <a href=\"https://www.brex.com/legal/developer-portal/\">Brex Access Agreement</a> and contact us if  you have any questions. 
         * @summary  Create incoming transfer 
         * @param {TransfersApiCreateIncomingTransferRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createIncomingTransfer(requestParameters: TransfersApiCreateIncomingTransferRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Transfer>> {
            const createIncomingTransferRequest: CreateIncomingTransferRequest = {
                description: requestParameters.description,
                counterparty: requestParameters.counterparty,
                receiving_account: requestParameters.receiving_account,
                amount: requestParameters.amount
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createIncomingTransfer(requestParameters.idempotencyKey, createIncomingTransferRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *  This endpoint creates a new transfer.  Currently, the API can only create transfers for the following payment rails: - ACH - DOMESTIC_WIRE - CHEQUE - INTERNATIONAL_WIRES (For vendors already created through dashboard. Rate limited to 100/day - Please reach out to developer-support@brex.com if you need to do more)  **Transaction Descriptions** * For outgoing check payments, a successful transfer will return a response containing a description value with a format of `Check #<check number> to <recipient_name> - <external_memo>`. * For book transfers (from one Brex Business account to another), the recipient value will have a format of `<customer_account.dba_name> - <external_memo>` and the sender will have a format of `<target customer account\'s dba name> - <external_memo>`. * For other payment rails, the format will be `<counterparty_name> - <external_memo>`, where Counterparty name is `payment_instrument.beneficiary_name` or `contact.name` For vendors created from the Payments API, the `counterparty_name` will be the `company_name` [field](https://developer.brex.com/openapi/payments_api/).  **Reminder**: You may not use the Brex API for any activity that requires a license or registration from any  governmental authority without Brex\'s prior review and approval. This includes but is not limited to any money services business or money transmission activity.  Please review the <a href=\"https://www.brex.com/legal/developer-portal/\">Brex Access Agreement</a> and contact us if  you have any questions. 
         * @summary  Create transfer 
         * @param {TransfersApiCreateTransferRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createTransfer(requestParameters: TransfersApiCreateTransferRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Transfer>> {
            const createTransferRequest: CreateTransferRequest = {
                description: requestParameters.description,
                counterparty: requestParameters.counterparty,
                amount: requestParameters.amount,
                external_memo: requestParameters.external_memo,
                originating_account: requestParameters.originating_account,
                approval_type: requestParameters.approval_type
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createTransfer(requestParameters.idempotencyKey, createTransferRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *  This endpoint gets a transfer by ID.  Currently, the API can only return transfers for the following payment rails: - ACH - DOMESTIC_WIRE - CHEQUE - INTERNATIONAL_WIRE 
         * @summary  Get transfer 
         * @param {TransfersApiGetByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getById(requestParameters: TransfersApiGetByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Transfer>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getById(requestParameters.id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *  This endpoint lists existing transfers for an account.  Currently, the API can only return transfers for the following payment rails: - ACH - DOMESTIC_WIRE - CHEQUE - INTERNATIONAL_WIRE 
         * @summary  Lists transfers  
         * @param {TransfersApiListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async list(requestParameters: TransfersApiListRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PageTransfer>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.list(requestParameters.cursor, requestParameters.limit, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * TransfersApi - factory interface
 * @export
 */
export const TransfersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TransfersApiFp(configuration)
    return {
        /**
         *  This endpoint creates a new incoming transfer. You may use use any eligible bank account connection to fund (ACH Debit)  any active Brex business account.  **Reminder**: You may not use the Brex API for any activity that requires a license or registration from any  governmental authority without Brex\'s prior review and approval. This includes but is not limited to any money services business or money transmission activity.  Please review the <a href=\"https://www.brex.com/legal/developer-portal/\">Brex Access Agreement</a> and contact us if  you have any questions. 
         * @summary  Create incoming transfer 
         * @param {TransfersApiCreateIncomingTransferRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createIncomingTransfer(requestParameters: TransfersApiCreateIncomingTransferRequest, options?: AxiosRequestConfig): AxiosPromise<Transfer> {
            return localVarFp.createIncomingTransfer(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         *  This endpoint creates a new transfer.  Currently, the API can only create transfers for the following payment rails: - ACH - DOMESTIC_WIRE - CHEQUE - INTERNATIONAL_WIRES (For vendors already created through dashboard. Rate limited to 100/day - Please reach out to developer-support@brex.com if you need to do more)  **Transaction Descriptions** * For outgoing check payments, a successful transfer will return a response containing a description value with a format of `Check #<check number> to <recipient_name> - <external_memo>`. * For book transfers (from one Brex Business account to another), the recipient value will have a format of `<customer_account.dba_name> - <external_memo>` and the sender will have a format of `<target customer account\'s dba name> - <external_memo>`. * For other payment rails, the format will be `<counterparty_name> - <external_memo>`, where Counterparty name is `payment_instrument.beneficiary_name` or `contact.name` For vendors created from the Payments API, the `counterparty_name` will be the `company_name` [field](https://developer.brex.com/openapi/payments_api/).  **Reminder**: You may not use the Brex API for any activity that requires a license or registration from any  governmental authority without Brex\'s prior review and approval. This includes but is not limited to any money services business or money transmission activity.  Please review the <a href=\"https://www.brex.com/legal/developer-portal/\">Brex Access Agreement</a> and contact us if  you have any questions. 
         * @summary  Create transfer 
         * @param {TransfersApiCreateTransferRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTransfer(requestParameters: TransfersApiCreateTransferRequest, options?: AxiosRequestConfig): AxiosPromise<Transfer> {
            return localVarFp.createTransfer(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         *  This endpoint gets a transfer by ID.  Currently, the API can only return transfers for the following payment rails: - ACH - DOMESTIC_WIRE - CHEQUE - INTERNATIONAL_WIRE 
         * @summary  Get transfer 
         * @param {TransfersApiGetByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getById(requestParameters: TransfersApiGetByIdRequest, options?: AxiosRequestConfig): AxiosPromise<Transfer> {
            return localVarFp.getById(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         *  This endpoint lists existing transfers for an account.  Currently, the API can only return transfers for the following payment rails: - ACH - DOMESTIC_WIRE - CHEQUE - INTERNATIONAL_WIRE 
         * @summary  Lists transfers  
         * @param {TransfersApiListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        list(requestParameters: TransfersApiListRequest = {}, options?: AxiosRequestConfig): AxiosPromise<PageTransfer> {
            return localVarFp.list(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createIncomingTransfer operation in TransfersApi.
 * @export
 * @interface TransfersApiCreateIncomingTransferRequest
 */
export type TransfersApiCreateIncomingTransferRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof TransfersApiCreateIncomingTransfer
    */
    readonly idempotencyKey: string
    
} & CreateIncomingTransferRequest

/**
 * Request parameters for createTransfer operation in TransfersApi.
 * @export
 * @interface TransfersApiCreateTransferRequest
 */
export type TransfersApiCreateTransferRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof TransfersApiCreateTransfer
    */
    readonly idempotencyKey: string
    
} & CreateTransferRequest

/**
 * Request parameters for getById operation in TransfersApi.
 * @export
 * @interface TransfersApiGetByIdRequest
 */
export type TransfersApiGetByIdRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof TransfersApiGetById
    */
    readonly id: string
    
}

/**
 * Request parameters for list operation in TransfersApi.
 * @export
 * @interface TransfersApiListRequest
 */
export type TransfersApiListRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof TransfersApiList
    */
    readonly cursor?: string
    
    /**
    * 
    * @type {number}
    * @memberof TransfersApiList
    */
    readonly limit?: number
    
}

/**
 * TransfersApiGenerated - object-oriented interface
 * @export
 * @class TransfersApiGenerated
 * @extends {BaseAPI}
 */
export class TransfersApiGenerated extends BaseAPI {
    /**
     *  This endpoint creates a new incoming transfer. You may use use any eligible bank account connection to fund (ACH Debit)  any active Brex business account.  **Reminder**: You may not use the Brex API for any activity that requires a license or registration from any  governmental authority without Brex\'s prior review and approval. This includes but is not limited to any money services business or money transmission activity.  Please review the <a href=\"https://www.brex.com/legal/developer-portal/\">Brex Access Agreement</a> and contact us if  you have any questions. 
     * @summary  Create incoming transfer 
     * @param {TransfersApiCreateIncomingTransferRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransfersApiGenerated
     */
    public createIncomingTransfer(requestParameters: TransfersApiCreateIncomingTransferRequest, options?: AxiosRequestConfig) {
        return TransfersApiFp(this.configuration).createIncomingTransfer(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *  This endpoint creates a new transfer.  Currently, the API can only create transfers for the following payment rails: - ACH - DOMESTIC_WIRE - CHEQUE - INTERNATIONAL_WIRES (For vendors already created through dashboard. Rate limited to 100/day - Please reach out to developer-support@brex.com if you need to do more)  **Transaction Descriptions** * For outgoing check payments, a successful transfer will return a response containing a description value with a format of `Check #<check number> to <recipient_name> - <external_memo>`. * For book transfers (from one Brex Business account to another), the recipient value will have a format of `<customer_account.dba_name> - <external_memo>` and the sender will have a format of `<target customer account\'s dba name> - <external_memo>`. * For other payment rails, the format will be `<counterparty_name> - <external_memo>`, where Counterparty name is `payment_instrument.beneficiary_name` or `contact.name` For vendors created from the Payments API, the `counterparty_name` will be the `company_name` [field](https://developer.brex.com/openapi/payments_api/).  **Reminder**: You may not use the Brex API for any activity that requires a license or registration from any  governmental authority without Brex\'s prior review and approval. This includes but is not limited to any money services business or money transmission activity.  Please review the <a href=\"https://www.brex.com/legal/developer-portal/\">Brex Access Agreement</a> and contact us if  you have any questions. 
     * @summary  Create transfer 
     * @param {TransfersApiCreateTransferRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransfersApiGenerated
     */
    public createTransfer(requestParameters: TransfersApiCreateTransferRequest, options?: AxiosRequestConfig) {
        return TransfersApiFp(this.configuration).createTransfer(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *  This endpoint gets a transfer by ID.  Currently, the API can only return transfers for the following payment rails: - ACH - DOMESTIC_WIRE - CHEQUE - INTERNATIONAL_WIRE 
     * @summary  Get transfer 
     * @param {TransfersApiGetByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransfersApiGenerated
     */
    public getById(requestParameters: TransfersApiGetByIdRequest, options?: AxiosRequestConfig) {
        return TransfersApiFp(this.configuration).getById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *  This endpoint lists existing transfers for an account.  Currently, the API can only return transfers for the following payment rails: - ACH - DOMESTIC_WIRE - CHEQUE - INTERNATIONAL_WIRE 
     * @summary  Lists transfers  
     * @param {TransfersApiListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransfersApiGenerated
     */
    public list(requestParameters: TransfersApiListRequest = {}, options?: AxiosRequestConfig) {
        return TransfersApiFp(this.configuration).list(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
